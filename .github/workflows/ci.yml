name: CI

on:
  push:
    tags: [ 'v*' ]
  pull_request:

jobs:
  pip-smoke:
    name: Pip smoke (all OS)
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.x"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Build distributions
        run: |
          python -m pip install --upgrade pip build twine
          python -m build
          python -m twine check dist/*

      - name: Create isolated venv for install test
        shell: bash
        run: |
          python -m venv .venv
          if [ "$RUNNER_OS" = "Windows" ]; then
            echo "VENV_PY=.venv/Scripts/python.exe" >> $GITHUB_ENV
          else
            echo "VENV_PY=.venv/bin/python" >> $GITHUB_ENV
          fi

      - name: Install wheel and smoke test (pip)
        shell: bash
        run: |
          # Check wheel exists and install safely
          "$VENV_PY" -c "
          import glob, subprocess, sys
          wheels = glob.glob('dist/*.whl')
          if not wheels:
              print('ERROR: No wheel files found in dist/')
              sys.exit(1)
          print(f'Found wheel: {wheels[0]}')
          subprocess.check_call([sys.executable, '-m', 'pip', 'install', '-U', wheels[0]])
          "
          "$VENV_PY" -m pip check
          # CLI via module to avoid PATH differences across OS
          "$VENV_PY" -m superflag --version
          "$VENV_PY" -m superflag install --target cn
          # Skip uninstall on Windows to avoid exit code 15 (process self-termination)
          if [ "$RUNNER_OS" != "Windows" ]; then
            "$VENV_PY" -m superflag uninstall
          else
            echo "Skipping uninstall test on Windows (would cause exit code 15)"
          fi

  pipx-smoke:
    name: Pipx smoke (ubuntu)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: pip

      - name: Build distributions
        run: |
          python -m pip install --upgrade pip build twine pipx
          python -m build
          python -m twine check dist/*

      - name: Install with pipx and smoke test
        shell: bash
        run: |
          # Verify wheel exists before pipx install
          python -c "
          import glob, sys
          wheels = glob.glob('dist/*.whl')
          if not wheels:
              print('ERROR: No wheel files found for pipx')
              sys.exit(1)
          print(f'Installing with pipx: {wheels[0]}')
          "
          python -m pipx install dist/*.whl
          APP=$(python -c "import json, subprocess; j=json.loads(subprocess.check_output(['python','-m','pipx','list','--json'])); print(j['venvs']['superflag']['metadata']['main_package']['app_paths'][0]['__Path__'])")
          "$APP" --version
          "$APP" install --target cn
          "$APP" uninstall
          python -m pipx uninstall superflag
