name: Publish (tags â†’ TestPyPI/PyPI)

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: read
  id-token: write

jobs:
  gate:
    name: Require CI success for this commit
    runs-on: ubuntu-latest
    permissions:
      actions: read
    outputs:
      ok: ${{ steps.check.outputs.ok }}
    steps:
      - name: Check CI result for this commit
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const sha = context.sha;
            const maxAttempts = 30; // ~10 minutes
            const delayMs = 20000;
            function sleep(ms){ return new Promise(r => setTimeout(r, ms)); }
            let ok = false;
            for (let i=0; i<maxAttempts; i++) {
              const runs = await github.rest.actions.listWorkflowRuns({
                owner,
                repo,
                workflow_id: 'ci.yml',
                event: 'push',
                head_sha: sha,
                per_page: 1
              });
              const run = runs.data.workflow_runs[0];
              if (!run) {
                core.info(`CI run not found yet (attempt ${i+1}/${maxAttempts})`);
                await sleep(delayMs);
                continue;
              }
              core.info(`CI status=${run.status}, conclusion=${run.conclusion}`);
              if (run.status === 'completed') {
                ok = run.conclusion === 'success';
                break;
              }
              await sleep(delayMs);
            }
            core.setOutput('ok', ok ? 'true' : 'false');
  build:
    name: Build dists
    runs-on: ubuntu-latest
    needs: gate
    if: needs.gate.outputs.ok == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          cache: pip

      - name: Install build backend
        run: |
          python -m pip install --upgrade pip build

      - name: Verify tag matches package version
        run: |
          TAG="${GITHUB_REF_NAME}"
          PKG_VER=$(python - <<'PY'
from pathlib import Path
ns = {}
exec(Path('src/context_engine_mcp/__version__.py').read_text(), ns)
print(ns.get('__version__',''))
PY
)
          echo "Tag: $TAG, __version__: $PKG_VER"
          # Require exact match between tag (without leading v) and package version
          # Supports PEP 440 pre-releases like 1.2.3rc1, 1.2.3a1, 1.2.3b1, 1.2.3.dev1
          if [[ "v${PKG_VER}" != "$TAG" ]]; then
            echo "Version mismatch: tag $TAG vs __version__ $PKG_VER" >&2
            exit 1
          fi

      - name: Build sdist and wheel
        run: python -m build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-artifacts
          path: dist/*

  publish-testpypi:
    name: Publish to TestPyPI
    needs: build
    # Pre-releases (rc, a, b, dev) go to TestPyPI
    if: contains(github.ref_name, 'rc') || contains(github.ref_name, 'a') || contains(github.ref_name, 'b') || contains(github.ref_name, 'dev')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-artifacts
          path: dist

      - name: Publish (TestPyPI)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

  publish-pypi:
    name: Publish to PyPI
    needs: build
    # Stable releases (no pre-release marker) go to PyPI
    if: ${{ !contains(github.ref_name, 'rc') && !contains(github.ref_name, 'a') && !contains(github.ref_name, 'b') && !contains(github.ref_name, 'dev') }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-artifacts
          path: dist

      - name: Publish (PyPI)
        uses: pypa/gh-action-pypi-publish@release/v1
